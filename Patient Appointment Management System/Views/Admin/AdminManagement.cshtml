@model Patient_Appointment_Management_System.ViewModels.AdminManagementViewModel
@{
    Layout = null; // Self-contained page for now
    ViewData["Title"] = "Admin Management";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>@ViewData["Title"] - Patient Appointment System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <style>
        body {
            background-color: #f8f9fa;
        }

        .navbar-custom { /* Consistent navbar styling */
            background-color: #0d6efd; /* Blue from your example */
        }

            .navbar-custom .navbar-brand,
            .navbar-custom .nav-link,
            .navbar-custom .btn-logout {
                color: white !important;
            }

        .nav-tabs .nav-link.active {
            background-color: #0d6efd !important;
            color: white !important;
            border-color: #0d6efd #0d6efd #fff;
        }

        .nav-tabs .nav-link {
            color: #0d6efd;
        }

        .btn-primary {
            background-color: #0d6efd;
            border-color: #0d6efd;
        }

        .table-primary { /* Ensure table header has good contrast */
            background-color: #cfe2ff;
            color: #052c65;
        }
    </style>
</head>
<body>

    <nav class="navbar navbar-dark navbar-custom">
        <div class="container-fluid">
            <a class="navbar-brand" asp-controller="Admin" asp-action="AdminManagement">Admin Management</a>
            <a asp-controller="Admin" asp-action="AdminDashboard" class="btn btn-logout ms-auto">
                <i class="bi bi-speedometer2 me-1"></i>Dashboard
            </a>
        </div>
    </nav>

    <div class="container mt-4">
        <ul class="nav nav-tabs" id="adminTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="admins-tab" data-bs-toggle="tab" data-bs-target="#admins" type="button" role="tab" aria-controls="admins" aria-selected="true">Admins</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="logs-tab" data-bs-toggle="tab" data-bs-target="#logs" type="button" role="tab" aria-controls="logs" aria-selected="false">System Logs</button>
            </li>
        </ul>

        <div class="tab-content mt-3">
            <!-- Admin Management Tab -->
            <div class="tab-pane fade show active" id="admins" role="tabpanel" aria-labelledby="admins-tab">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h4>Manage Admins</h4>
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addAdminModal">
                        <i class="bi bi-plus-circle me-1"></i>Add Admin
                    </button>
                </div>
                <div class="table-responsive">
                    <table class="table table-bordered table-striped bg-white">
                        <thead class="table-primary">
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Role</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="adminTableBody">
                            @if (Model.Admins != null && Model.Admins.Any())
                            {
                                @foreach (var admin in Model.Admins)
                                {
                                    <tr>
                                        <td>@admin.AdminId</td>
                                        <td>@Html.DisplayFor(modelItem => admin.Name)</td>
                                        <td>@Html.DisplayFor(modelItem => admin.Email)</td>
                                        <td>@Html.DisplayFor(modelItem => admin.Role)</td>
                                        <td>
                                            <button class="btn btn-sm btn-warning me-1" onclick="editAdmin(@admin.AdminId)">
                                                <i class="bi bi-pencil-square"></i> Edit
                                            </button>
                                            @* For server-side delete, this will be a form post *@
                                            <button class="btn btn-sm btn-danger" onclick="deleteAdmin_clientSide(@admin.AdminId, '@admin.Name')">
                                                <i class="bi bi-trash"></i> Delete
                                            </button>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr><td colspan="5" class="text-center">No admins found.</td></tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- System Logs Tab -->
            <div class="tab-pane fade" id="logs" role="tabpanel" aria-labelledby="logs-tab">
                <h4>System Logs</h4>
                <div class="bg-white border p-3" style="min-height: 200px; max-height: 400px; overflow-y: auto;" id="logContainer">
                    @if (Model.SystemLogs != null && Model.SystemLogs.Any())
                    {
                        @foreach (var log in Model.SystemLogs)
                        {
                            <p class="mb-1 border-bottom pb-1">@log</p>
                        }
                    }
                    else
                    {
                        <p>No system logs available.</p>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Add Admin Modal -->
    <div class="modal fade" id="addAdminModal" tabindex="-1" aria-labelledby="addAdminModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            @* TODO: Convert this to an asp-action form for server-side submission later *@
            <form id="addAdminFormClientSide" class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addAdminModalLabel">Add New Admin</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="adminName" class="form-label">Name</label>
                        <input type="text" class="form-control" id="adminName" required>
                    </div>
                    <div class="mb-3">
                        <label for="adminEmail" class="form-label">Email</label>
                        <input type="email" class="form-control" id="adminEmail" required>
                    </div>
                    <div class="mb-3">
                        <label for="adminRole" class="form-label">Role</label>
                        <select class="form-select" id="adminRole" required>
                            <option value="" disabled selected>Select a role</option>
                            <option value="Administrator">Administrator</option>
                            <option value="Super Admin">Super Admin</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Add Admin (Client-Side)</button>
                </div>
            </form>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Client-side data (initial data comes from @Model, this is for client-side manipulation)
        let clientAdmins = @Html.Raw(Json.Serialize(Model.Admins ?? new List<Patient_Appointment_Management_System.ViewModels.AdminUserViewModel>()));
        let clientLogs = @Html.Raw(Json.Serialize(Model.SystemLogs ?? new List<string>()));

        function renderAdminsTable() {
            const tableBody = $('#adminTableBody');
            tableBody.empty();
            if (clientAdmins.length === 0) {
                tableBody.append('<tr><td colspan="5" class="text-center">No admins found (client-side).</td></tr>');
                return;
            }
            clientAdmins.forEach(admin => {
                tableBody.append(`
                    <tr id="admin-row-${admin.adminId}">
                        <td>${admin.adminId}</td>
                        <td>${admin.name}</td>
                        <td>${admin.email}</td>
                        <td>${admin.role}</td>
                        <td>
                            <button class="btn btn-sm btn-warning me-1" onclick="editAdmin(${admin.adminId})"><i class="bi bi-pencil-square"></i> Edit</button>
                            <button class="btn btn-sm btn-danger" onclick="deleteAdmin_clientSide(${admin.adminId}, '${admin.name}')"><i class="bi bi-trash"></i> Delete</button>
                        </td>
                    </tr>
                `);
            });
        }

        function renderLogsContainer() {
            const logContainer = $('#logContainer');
            logContainer.empty();
            if (clientLogs.length === 0) {
                 logContainer.append('<p>No system logs available (client-side).</p>');
                 return;
            }
            clientLogs.forEach(log => {
                logContainer.append(`<p class="mb-1 border-bottom pb-1">${log}</p>`);
            });
        }

        $('#addAdminFormClientSide').on('submit', function (e) {
            e.preventDefault();
            const name = $('#adminName').val();
            const email = $('#adminEmail').val();
            const role = $('#adminRole').val();

            if (!name || !email || !role) {
                alert("Please fill in all fields.");
                return;
            }

            // For client-side only, generate a temporary ID
            const newId = clientAdmins.length ? Math.max(...clientAdmins.map(a => a.adminId)) + 1 : 1;
            const newAdmin = { adminId: newId, name, email, role };

            clientAdmins.push(newAdmin);
            clientLogs.push(`Admin ${name} added (client-side).`);

            renderAdminsTable();
            renderLogsContainer();

            $('#addAdminModal').modal('hide');
            this.reset();
            // In a real app with server-side POST, you would reload the page or update via AJAX response.
        });

        function deleteAdmin_clientSide(id, adminName) {
            if (!confirm(`Are you sure you want to delete admin: ${adminName}? This is client-side only.`)) {
                return;
            }
            clientAdmins = clientAdmins.filter(a => a.adminId !== id);
            clientLogs.push(`Admin ${adminName} deleted (client-side).`);
            renderAdminsTable();
            renderLogsContainer();
            // For server-side, you'd make an AJAX call or form post to delete.
        }

        function editAdmin(id) {
            // TODO: Implement edit functionality.
            // This would typically involve populating a modal with the admin's current data,
            // allowing edits, and then submitting the changes (client-side or server-side).
            alert("Edit functionality for Admin ID: " + id + " needs to be implemented. This could open another modal pre-filled with this admin's data.");
        }

        // Initial render on page load (after Razor has rendered server-side data)
        // The clientAdmins and clientLogs are already initialized from @Model.
        // So, if JavaScript is enabled, these functions will essentially re-render based on the client-side copies.
        // If JS is disabled, the Razor-rendered HTML will still be visible.
        $(document).ready(function () {
            // No need to call renderAdminsTable() or renderLogsContainer() here
            // if the Razor view already renders the initial state from the Model.
            // These functions are mainly for dynamic updates after client-side actions.
        });
    </script>
</body>
</html>